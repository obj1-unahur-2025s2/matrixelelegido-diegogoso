import pasajeros.*
import nave.*


describe "testeamos a Neo " {
  test "Neo es el Elegido"{
    assert.that(neo.esElElegido())
  }

  test "test neo vitalidad inicial"{
    assert.equals(10, neo.vitalidad())
  }
  test "test neo vitalidad despues de saltar"{
    neo.saltar()
    assert.equals(5, neo.vitalidad())  
  }

}

describe "testeamos a nave" {
  test "morfeo es el Elegido"{
    assert.notThat(morfeo.esElElegido())
  }

  test "test morfeo vitalidad inicial"{
    assert.equals(8, morfeo.vitalidad())
  }
  test "test morfeo vitalidad despues de saltar"{
    morfeo.saltar()
    assert.equals(7, morfeo.vitalidad())  
    assert.that(morfeo.cansado)
    morfeo.saltar() 
    assert.equals(6, morfeo.vitalidad())  
    assert.notThat(morfeo.cansado)
  }

}
describe "testeamos a Trinity" {
  test "trinity es el Elegido"{
    assert.notThat(trinity.esElElegido())
  }

  test "test trinity vitalidad inicial"{
    assert.equals(0, trinity.vitalidad())
  }
  test "test trinity vitalidad despues de saltar"{
    trinity.saltar()
    assert.equals(0, trinity.vitalidad())  
  }
  test "test trinity vitalidad despues de saltar varias veces"{
    trinity.saltar()
    trinity.saltar()
    trinity.saltar()
    assert.equals(0, trinity.vitalidad())  
  }

}
describe "testeamos a la nave" {
  test "antes de agregar pasajeros, la nave esta vacia"{
    assert.equals(0, nave.cantidadDePasajeros())
    nave.pasajeros.clear()
    nave.agregarPasajero(neo)
    nave.agregarPasajero(morfeo)
    nave.agregarPasajero(trinity)
  }

  test "test cantidad de pasajeros"{
    assert.equals(3, nave.cantidadDePasajeros())
  }
  test "test pasajero de mayor vitalidad"{
    assert.equals(morfeo, nave.pasajeroDeMayorVitalidad())
  }
  test "test esta equilibrada en vitalidad"{
    assert.that(nave.estaEquilibradaEnVitalidad())
    morfeo.saltar() //vitalidad 7
    assert.that(nave.estaEquilibradaEnVitalidad())
    morfeo.saltar() //vitalidad 6
    assert.that(nave.estaEquilibradaEnVitalidad())
    morfeo.saltar() //vitalidad 5
    assert.that(not nave.estaEquilibradaEnVitalidad())
  }
  test "test esta el elegido"{
    assert.that(nave.estaElElegido())
  }
  test "test chocar hace saltar a todos y vacia la nave"{
    nave.chocar()
    assert.equals(0, nave.cantidadDePasajeros())
    assert.equals(50, neo.vitalidad()) //energia 50
    assert.equals(7, morfeo.vitalidad()) //vitalidad 7
    assert.equals(0, trinity.vitalidad()) 
  }
  test "test acelerar hace saltar a todos menos al elegido y se quedan los que no estan cansados"{
    morfeo.saltar() //vitalidad 7, cansado true
    nave.acelerar()
    assert.equals(2, nave.cantidadDePasajeros())
    assert.equals(50, neo.vitalidad()) //energia 50
    assert.equals(7, morfeo.vitalidad()) //vitalidad 7
    assert.equals(0, trinity.vitalidad()) 
    nave.acelerar() //morfeo salta de nuevo y queda descansado pero con vitalidad 6
    assert.equals(2, nave.cantidadDePasajeros())
    morfeo.saltar() //vitalidad 6, cansado true
   
  }
}